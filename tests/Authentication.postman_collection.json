{
	"info": {
		"_postman_id": "c505df94-ea11-465d-831d-1295812e0634",
		"name": "Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33777678"
	},
	"item": [
		{
			"name": "register invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Test failure on duplicate email or missing fields",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.match(/^application\\/json\\b/);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    pm.expect(jsonData.message).to.include(\"password\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"generatedEmail\", pm.variables.replaceIn('{{$randomEmail}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{generatedEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Test successful user registration",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.match(/^application\\/json\\b/);",
							"});",
							"",
							"pm.test(\"Response contains user id and email\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"_id\");",
							"    pm.expect(jsonData.data).to.have.property(\"email\");",
							"    pm.expect(jsonData.data.email).to.include(\"@\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"generatedEmail\", pm.variables.replaceIn('{{$randomEmail}}'));",
							"",
							"const randomNum = Math.floor(1000 + Math.random() * 9000);",
							"pm.environment.set(\"generatedPassword\", `Pass${randomNum}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{generatedEmail}}\",\n    \"password\": \"{{generatedPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Test successful login returns JWT token",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.match(/^application\\/json\\b/);",
							"});",
							"",
							"pm.test(\"Response contains JWT token\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\").and.not.empty;",
							"    // Save token to environment variable for future requests",
							"    pm.environment.set(\"jwtToken\", jsonData.token);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{generatedEmail}}\",\n    \"password\": \"{{generatedPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Test failure on invalid credentials",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.match(/^application\\/json\\b/);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"  const jsonData = pm.response.json();",
							"  pm.expect(jsonData).to.have.property(\"message\");",
							"  pm.expect(jsonData.message).to.include(\"Invalid email\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"testhej@example.com\",\n  \"password\": \"supersecret123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		}
	]
}